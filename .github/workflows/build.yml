# Can build multiple projects:
# - on push, only in evaluated mode
# - on demand, only in dryrun mode
name: build multiple
on:
  # On push on any branch
  push:
  # Can be run from GH UI
  workflow_dispatch:
    inputs:
      all:
        description: all the projects
        type: boolean
        default: false
        required: false
      projects:
        description: comma-separated list
        type: string
        required: false
      build_mode:
        description: Build mode
        type: choice
        options:
        - evaluated
        - dryrun
        required: true
        default: dryrun
    schedule:
    # 3rd day of the month at 12 (avoiding 1st day that may have more load)
    - cron: '0 12 3 * *'

jobs:
  infer_matrix:
    name: List projects
    runs-on: 'ubuntu-latest'
    timeout-minutes: 10
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      projects: ${{ steps.set-vars.outputs.projects }}
      build_mode: ${{ steps.set-vars.outputs.build_mode }}
    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        auto-activate-base: false
        activate-environment: examples-gallery-test
        environment-file: environment-test.yml
    - name: infer project list and build mode
      id: set-vars
      run: |
        EVENTNAME="${{ github.event_name }}"
        ALL="${{ inputs.all }}"
        INPUTS="${{ inputs.projects }}"
        if [ "$EVENTNAME" == "push" ]; then
          PROJECTS=$(doit list_changed_dirs | tail -n -1)
          BUILD_MODE="dryrun"
        elif [ "$EVENTNAME" == "workflow_dispatch" ]; then
          BUILD_MODE="${{ inputs.build_mode }}"
          if [ "$ALL" == "true" ]; then
            PROJECTS=$(doit list_project_dir_names | tail -n -1)
          else
            echo "$INPUTS" > .projects
            PROJECTS=$(doit list_comma_separated_projects | tail -n -1)
            rm .projects
          fi
        elif [ "$EVENTNAME" == "schedule" ]; then
          PROJECTS=$(doit list_project_dir_names | tail -n -1)
          BUILD_MODE="dryrun"
        fi
        echo "Projects to build: $PROJECTS"
        echo "Build mode: $BUILD_MODE"
        echo "PROJECTS=$PROJECTS" >> $GITHUB_OUTPUT
        echo "BUILD_MODE=$BUILD_MODE" >> $GITHUB_OUTPUT
  build:
    needs: infer_matrix
    # TODO
    # This name is watched by the docs workflow, make sure do uptate the logic there too if you change it.
    name: Build ${{ matrix.project }} in ${{ needs.infer_matrix.outputs.build_mode }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.infer_matrix.outputs.projects) }}
    uses: pyviz-topics/examples/.github/workflows/build_one.yml@main
    with:
      project: ${{ matrix.project }}
      build_mode: ${{ needs.infer_matrix.outputs.build_mode }}
