name: build one

on:
  workflow_call:
    inputs:
      project:
        description: Project to test
        required: true
        type: string
      type:
        description: hack
        required: true
        type: string
  workflow_dispatch:
    inputs:
      project:
        description: Project to build (dryrun only)
        required: true
        type: string

jobs:
  infer_runner:
    name: infer runner
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    timeout-minutes: 10
    outputs:
      runner: ${{ steps.set-runner.outputs.runner }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: install deps
      # Minimal required deps to run the following script
      run: pip install doit pyyaml
    - name: infer runner
      id: set-runner
      run: |
        RUNNER=$(doit util_gh_runner:${{ inputs.project }} | tail -n -1)
        echo "GH runner: $RUNNER"
        echo "RUNNER=$RUNNER" >> $GITHUB_OUTPUT
  build_one:
    needs: infer_runner
    name: build ${{ inputs.project }}
    runs-on: ${{ needs.infer_runner.outputs.runner }}
    defaults:
      run:
        shell: bash -l {0}
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v3
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        auto-update-conda: true
        auto-activate-base: false
        activate-environment: examples-gallery-manage
        environment-file: envs/environment-${{ needs.infer_runner.outputs.runner }}.lock
    - name: enable libmamba
      run: |
        conda activate base
        conda install conda-libmamba-solver
        conda config --set solver libmamba
    - name: list files
      run: doit build_list_existing_files:${{ inputs.project }}
    - name: prepare project
      run: doit build_prepare_project:${{ inputs.project }}
    - name: process notebooks
      run: doit build_process_notebooks:${{ inputs.project }}
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project }}
        path: doc/${{ inputs.project }}/
        retention-days: 3
    - name: clean project folder
      run: doit clean build_list_existing_files:${{ inputs.project }}
    - name: deploy project
      # Only push to the branch when the workflow is called by pr_flow.yml -> build.yml
      # Could be updated to allow to build projects using worfklow_dispatch to see
      # the evaluated output of a project.
      if: inputs.type == 'workflow_call'
      run: |
        DIR=${{ inputs.project }}
        BRANCHNAME="tmp_evaluated_fghgf_${{ github.ref_name }}"
        REPO_URL="https://github.com/${GITHUB_REPOSITORY}.git"
        git config user.email "travis@travis.org"
        git config user.name "travis"

        # Move doc to move to a tmp directory
        mv ./doc/$DIR ./tmp

        # Fetch main to check it out again
        git fetch https://github.com/${GITHUB_REPOSITORY}.git main:refs/remotes/main

        # Checkout tmp dev branch
        if git ls-remote --exit-code --heads "$REPO_URL" "$BRANCHNAME"
        then
            echo "Remote branch already there, fetching $BRANCHNAME"
            git fetch $REPO_URL $BRANCHNAME:refs/remotes/$BRANCHNAME
            git checkout $BRANCHNAME
            git log --oneline
        else
            echo "Remote branch not found"
            git switch --orphan $BRANCHNAME
        fi

        mkdir -p doc
        git diff
        if [ -d  ./doc/$DIR ]; then rm -rf ./doc/$DIR; fi
        mkdir ./doc/$DIR
        mv ./tmp/* ./doc/$DIR
        rmdir ./tmp
        git add ./doc/$DIR
        git commit -m "adding $DIR"
        git push --force "https://pyviz-developers:${{ secrets.GITHUB_TOKEN }}@github.com/holoviz-topics/examples.git" HEAD:$BRANCHNAME
        git checkout main
    - name: clean up
      run: doit clean --clean-dep build:${{ inputs.project }}
    - name: git diff
      run: git diff
    - name: check clean up
      run: git diff --quiet --exit-code
