name: docs

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
    types:
      - closed
  workflow_call:
    inputs:
      target:
        description: Site to build and deploy, dev or main
        type: string
        required: true
        default: dev
      evaluated_branch:
        description: Branch to pull the evaluated projects from
        type: string
        required: true
        default: ''
      type:
        description: hack
        required: true
        type: string
      projects:
        description: Projects that were built
        type: string
        required: false
  workflow_dispatch:
    inputs:
      target:
        description: Site to build and deploy
        type: choice
        options:
        - dev
        - main
        - dryrun
        required: true
        default: dryrun
  schedule:
    - cron: '0 2 * * SUN'

jobs:
  build_docs:
    if: github.event_name != 'pull_request' || github.event.pull_request.merged == true 
    name: Documentation
    runs-on: 'ubuntu-latest'
    timeout-minutes: 30
    defaults:
      run:
        shell: bash -el {0}
    steps:
    - uses: actions/checkout@v3
    - name: debug
      run: |
        echo ${{ github.ref_name }}
        echo ${{ github.event_name }}
    - uses: hmarr/debug-action@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: "latest"
        auto-activate-base: false
        activate-environment: examples-gallery-doc
        environment-file: envs/environment-doc.yml
    - name: infer evaluated branch name
      id: set-evaluated-branch
      run: |
        EVENTNAME="${{ github.event_name }}"
        if [ "${{ inputs.type }}" == "workflow_call" ]; then
          ISWORKFOWCALL="true"
        else
          ISWORKFOWCALL="false"
        fi
        # Warning: 
        if [ "$ISWORKFOWCALL" == "true" ]; then
          NAME="${{ inputs.evaluated_branch }}"
        elif [ "$EVENTNAME" == "push" ]; then
          NAME="evaluated"
        elif [ "$EVENTNAME" == "pull_request" ]; then
          NAME="tmp_evaluated_${{ github.event.pull_request.head.ref }}"
        elif [ "$EVENTNAME" == "workflow_dispatch" ]; then
          NAME="evaluated"
        elif [ "$EVENTNAME" == "schedule" ]; then
          NAME="evaluated"
        fi
        echo "Evaluated branch: $NAME"
        echo "NAME=$NAME" >> $GITHUB_OUTPUT
    - name: sync evaluated on merged PRs
      if: github.event_name == 'pull_request'
      run: |
        PROJECTS=$(doit list_changed_dirs_with_last_commit | tail -n -1)
        if [ "$PROJECTS" != "[]" ] then;
          # Some changes were made, the evaluated branch needs to
          # be updated.
          DEVBRANCH=${{ steps.set-evaluated-branch.name }}
          echo "Projects changed since last commit on main: $PROJECTS"
          echo "Merging the $DEVBRANCH branch into the evaluated branch "
          git config user.email "travis@travis.org"
          git config user.name "travis"
          git fetch https://github.com/${GITHUB_REPOSITORY}.git evaluated:refs/remotes/evaluated
          git fetch https://github.com/${GITHUB_REPOSITORY}.git $DEVBRANCH:refs/remotes/$DEVBRANCH
          git checkout evaluated
          git merge $DEVBRANCH
          git diff
          git log -n 10 --oneline
          echo "Push changes to evaluated"
          # git push -f -q "https://pyviz-developers:${{ secrets.GITHUB_TOKEN }}@github.com/pyviz-topics/examples.git" HEAD:evaluated
          git checkout main
          git clean -fxd
        fi
    - name: checkout evaluated
      if: inputs.type != 'workflow_call' || (inputs.type == 'workflow_call' && inputs.projects == '[]')
      run: |
        git checkout -b deploy--temp-asdfghjkl
        git fetch https://github.com/${GITHUB_REPOSITORY}.git evaluated:refs/remotes/evaluated
        git checkout evaluated -- ./doc
        tree doc -L 2
    - name: sync dev evaluated
      if: inputs.type == 'workflow_call' && inputs.projects != '[]'
      run: |
        # We setup the repo so that it has the doc from the dev evaluated branch
        # and from the 
        DEVBRANCH=${{ steps.set-evaluated-branch.name }}
        echo "Merging the $DEVBRANCH branch into the evaluated branch "
        git fetch https://github.com/${GITHUB_REPOSITORY}.git evaluated:refs/remotes/evaluated
        git fetch https://github.com/${GITHUB_REPOSITORY}.git $DEVBRANCH:refs/remotes/$DEVBRANCH
        git checkout evaluated
        git merge $DEVBRANCH
        git checkout main
        git checkout evaluated -- ./doc
        git diff
        git log -n 10 --oneline
        tree doc -L 2
    - name: make assets
      run: |
        doit make_assets
    - name: build website
      run: |
        doit build_website
    - name: build index redirects
      run: |
        doit index_redirects
    - name: Deploy dev
      if: |
        (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'dev') ||
        (github.event_name == 'push' && !contains(github.event.head_commit.message, 'website_release'))
      run: echo Deploy Dev
      # uses: peaceiris/actions-gh-pages@v3
      # with:
      #   personal_token: ${{ secrets.ACCESS_TOKEN }}
      #   external_repository: pyviz-dev/examples
      #   publish_dir: ./builtdocs
      #   force_orphan: true
    - name: Deploy main
      if: |
        (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'main') ||
        (github.event_name == 'push' && contains(github.event.head_commit.message, 'website_release'))
      run: echo Deploy main
      # uses: peaceiris/actions-gh-pages@v3
      # with:
      #   github_token: ${{ secrets.GITHUB_TOKEN }}
      #   publish_dir: ./builtdocs
      #   cname: examples.pyviz.org
      #   force_orphan: true
    - name: Clean up
      run: doit clean --clean-dep website
      # TODO: remove when the last step is fixed
    - name: Check clean up
      run: git diff
    - name: Check clean up
      run: git diff --quiet --exit-code
