name: docs

on:
  push:
  workflow_dispatch:
    inputs:
      target:
        description: 'Site to build and deploy'
        type: choice
        options:
        - dev
        - main
        - dryrun
        required: true
        default: dryrun
  schedule:
    - cron: '0 2 * * SUN'


jobs:
  build_docs:
    name: Documentation
    runs-on: 'ubuntu-latest'
    timeout-minutes: 30
    defaults:
      run:
        shell: bash -el {0}
    env:
      DESC: "Documentation build"
    if: contains(github.event.head_commit.message, 'build:') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          auto-activate-base: false
          activate-environment: examples-gallery-doc
          environment-file: environment-doc.yml
      - name: Get directory name
        id: get-dir-name
        if: contains(github.event.head_commit.message, 'build:') && !contains(github.event.head_commit.message, 'website_release')
        run : |
          MSG="${{ github.event.head_commit.message }}"
          MSG="${MSG##*build:}"
          DIR="${MSG%%]*}"
          if [ "$DIR" = "" ]
          then
            echo "No directory name provided"
            exit 1
          fi
          PROJECT_EXISTS=$(doit check_project_exists --name %DIR | tail -n -1)
          if [ "$PROJECT_EXISTS" = "false" ]; then
            echo "The project '$DIR' is not in the directories of the branch '$GITHUB_REF_NAME'"
            exit 1
          fi
          echo "DIR=$DIR" >> $GITHUB_OUTPUT
      - name: Wait for project build to succeed
        id: wait-for-build
        uses: fountainhead/action-wait-for-check@v1.1.0
        # Only when build: is in the commit message and that website_release wasn't asked
        if: contains(github.event.head_commit.message, 'build:') && !contains(github.event.head_commit.message, 'website_release')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # name property of the job that builds the project
          checkName: Build project ${{ steps.vars.outputs.DIR }}
          timeoutSeconds: 1800
      - name: Project build failed
        if: contains(github.event.head_commit.message, 'build:') && !contains(github.event.head_commit.message, 'website_release') && steps.wait-for-build.outputs.conclusion != 'success'
        run: exit 1
      - name: conda info and list
        run: |
          conda info --all
          conda list --show-channel-urls
      - name: checkout evaluated
        run: |
          git checkout -b deploy-${GITHUB_REF#refs/*/}
          git fetch https://github.com/${GITHUB_REPOSITORY}.git evaluated:refs/remotes/evaluated
          git checkout evaluated -- ./doc
      - name: make assets
        run: |
          doit make_assets
      - name: build website
        run: |
          doit build_website
      - name: build index redirects
        run: |
          doit index_redirects
      - name: Deploy dev
        uses: peaceiris/actions-gh-pages@v3
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'dev') ||
          (github.event_name == 'push' && !contains(github.event.head_commit.message, 'website_release'))
        with:
          personal_token: ${{ secrets.ACCESS_TOKEN }}
          external_repository: pyviz-dev/examples
          publish_dir: ./builtdocs
          force_orphan: true
      - name: Deploy main
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'main') ||
          (github.event_name == 'push' && contains(github.event.head_commit.message, 'website_release'))
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./builtdocs
          cname: examples.pyviz.org
          force_orphan: true
      - name: Clean up
        run: doit clean --clean-dep build_website_complete
      - name: Check clean up
        run: git diff --quiet --exit-code
