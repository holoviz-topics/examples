# We deliberately don't use travis's language=python option because
# we install miniconda and use conda to get python. Additionally,
# Travis's auto-install of python doesn't work on osx images (see
# https://github.com/travis-ci/travis-ci/issues/4729).

# This file should be using semantically named doit commands defined in
# dodo.py
language: generic
sudo: false
os:
  - linux

env:
  global:
    - PYENV_VERSION=3.7
    - RUN_LINT=true  # use this var to turn off linting for a specific dir
    - RUN_TEST=true  # use this var to turn off testing for a specific dir

jobs:
  include:
    # Use [only:<example_dir>] in your commit message to only run a particular set of tests
    - env: DIR=attractors
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=bay_trimesh
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=census
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=gerrymandering
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=landsat
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=network_packets
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=nyc_taxi
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=osm
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))
    - env: DIR=uk_researchers
      if: (commit_message !~ /^.*(only:).*$/) OR (commit_message =~ concat(^.*,env(DIR),.*$))

before_install:
  - pip install pyctdev && doit miniconda_install
  - export PATH="$HOME/miniconda/bin:$PATH" && hash -r
  - doit ecosystem_setup

script:
  - doit small_data_setup --name $DIR
  - cd $DIR
  - if ! anaconda-project list-downloads | grep -q 'No downloads'; then
      if ! [ -d data ]; then
        echo 'FAIL needs data and no test data found' && exit 1;
      fi;
    fi
  - $RUN_LINT && anaconda-project run lint || echo "skipping lint"
  - $RUN_TEST && anaconda-project run test || echo "skipping test"
  - cd ..
  - doit small_data_cleanup --name $DIR

notifications:
  email: false
